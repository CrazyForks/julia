"""
    A module to give Tokenize tokens better names!
"""
baremodule TokenKinds

import Tokenize
const _T = Tokenize.Tokens

const ENDMARKER   =  _T.ENDMARKER
const ERROR       =  _T.ERROR
const COMMENT     =  _T.COMMENT
const WHITESPACE  =  _T.WHITESPACE
const IDENTIFIER  =  _T.IDENTIFIER
const var"@"      =  _T.AT_SIGN
const var","      =  _T.COMMA
const var";"      =  _T.SEMICOLON

const BEGIN_KEYWORDS   =  _T.begin_keywords
const KEYWORD          =  _T.KEYWORD
const var"abstract"    =  _T.ABSTRACT
const var"baremodule"  =  _T.BAREMODULE
const var"begin"       =  _T.BEGIN
const var"break"       =  _T.BREAK
const var"catch"       =  _T.CATCH
const var"const"       =  _T.CONST
const var"continue"    =  _T.CONTINUE
const var"do"          =  _T.DO
const var"else"        =  _T.ELSE
const var"elseif"      =  _T.ELSEIF
const var"end"         =  _T.END
const var"export"      =  _T.EXPORT
const var"finally"     =  _T.FINALLY
const var"for"         =  _T.FOR
const var"function"    =  _T.FUNCTION
const var"global"      =  _T.GLOBAL
const var"if"          =  _T.IF
const var"import"      =  _T.IMPORT
const var"importall"   =  _T.IMPORTALL
const var"let"         =  _T.LET
const var"local"       =  _T.LOCAL
const var"macro"       =  _T.MACRO
const var"module"      =  _T.MODULE
const var"mutable"     =  _T.MUTABLE
const var"new"         =  _T.NEW
const var"outer"       =  _T.OUTER
const var"primitive"   =  _T.PRIMITIVE
const var"quote"       =  _T.QUOTE
const var"return"      =  _T.RETURN
const var"struct"      =  _T.STRUCT
const var"try"         =  _T.TRY
const var"type"        =  _T.TYPE
const var"using"       =  _T.USING
const var"while"       =  _T.WHILE
const END_KEYWORDS     =  _T.end_keywords

const BEGIN_CSTPARSER     =  _T.begin_cstparser
const invisible_brackets  =  _T.INVISIBLE_BRACKETS
const nothing             =  _T.NOTHING
const ws                  =  _T.WS
const semicolon_ws        =  _T.SEMICOLON_WS
const newline_ws          =  _T.NEWLINE_WS
const empty_ws            =  _T.EMPTY_WS
const END_CSTPARSER       =  _T.end_cstparser

const BEGIN_LITERAL  =  _T.begin_literal
const LITERAL        =  _T.LITERAL
const integer        =  _T.INTEGER
const bin_int        =  _T.BIN_INT
const hex_int        =  _T.HEX_INT
const oct_int        =  _T.OCT_INT
const float          =  _T.FLOAT
const string         =  _T.STRING
const triple_string  =  _T.TRIPLE_STRING
const char           =  _T.CHAR
const cmd            =  _T.CMD
const triple_cmd     =  _T.TRIPLE_CMD
const var"true"      =  _T.TRUE
const var"false"     =  _T.FALSE
const END_LITERAL    =  _T.end_literal

const BEGIN_DELIMITERS  =  _T.begin_delimiters
const var"["            =  _T.LSQUARE
const var"]"            =  _T.RSQUARE
const var"{"            =  _T.LBRACE
const var"}"            =  _T.RBRACE
const var"("            =  _T.LPAREN
const var")"            =  _T.RPAREN
const END_DELIMITERS    =  _T.end_delimiters

const BEGIN_OPS  =  _T.begin_ops
const OP         =  _T.OP
const var"..."   =  _T.DDDOT

# Level 1
const BEGIN_ASSIGNMENTS  =  _T.begin_assignments
const var"="             =  _T.EQ
const var"+="            =  _T.PLUS_EQ
const var"-="            =  _T.MINUS_EQ
const var"*="            =  _T.STAR_EQ
const var"/="            =  _T.FWD_SLASH_EQ
const var"//="           =  _T.FWDFWD_SLASH_EQ
const var"|="            =  _T.OR_EQ
const var"^="            =  _T.CIRCUMFLEX_EQ
const var"÷="            =  _T.DIVISION_EQ
const var"%="            =  _T.REM_EQ
const var"<<="           =  _T.LBITSHIFT_EQ
const var">>="           =  _T.RBITSHIFT_EQ
const var">>>="          =  _T.UNSIGNED_BITSHIFT_EQ
const var"\="            =  _T.BACKSLASH_EQ
const var"&="            =  _T.AND_EQ
const var":="            =  _T.COLON_EQ
const var"~"             =  _T.APPROX
const var"$="            =  _T.EX_OR_EQ
const var"⊻="            =  _T.XOR_EQ
const END_ASSIGNMENTS    =  _T.end_assignments

const BEGIN_PAIRARROW  =  _T.begin_pairarrow
const var"=>"          =  _T.PAIR_ARROW
const END_PAIRARROW    =  _T.end_pairarrow

# Level 2
const BEGIN_CONDITIONAL  =  _T.begin_conditional
const var"?"             =  _T.CONDITIONAL
const END_CONDITIONAL    =  _T.end_conditional

# Level 3
const BEGIN_ARROW  =  _T.begin_arrow
const var"-->"     =  _T.RIGHT_ARROW
const var"<--"     =  _T.LEFT_ARROW
const var"<-->"    =  _T.DOUBLE_ARROW
const var"←"       =  _T.LEFTWARDS_ARROW
const var"→"       =  _T.RIGHTWARDS_ARROW
const var"↔"       =  _T.LEFT_RIGHT_ARROW
const var"↚"       =  _T.LEFTWARDS_ARROW_WITH_STROKE
const var"↛"       =  _T.RIGHTWARDS_ARROW_WITH_STROKE
const var"↞"       =  _T.LEFTWARDS_TWO_HEADED_ARROW
const var"↠"       =  _T.RIGHTWARDS_TWO_HEADED_ARROW
const var"↢"       =  _T.LEFTWARDS_ARROW_WITH_TAIL
const var"↣"       =  _T.RIGHTWARDS_ARROW_WITH_TAIL
const var"↤"       =  _T.LEFTWARDS_ARROW_FROM_BAR
const var"↦"       =  _T.RIGHTWARDS_ARROW_FROM_BAR
const var"↮"       =  _T.LEFT_RIGHT_ARROW_WITH_STROKE
const var"⇎"       =  _T.LEFT_RIGHT_DOUBLE_ARROW_WITH_STROKE
const var"⇍"       =  _T.LEFTWARDS_DOUBLE_ARROW_WITH_STROKE
const var"⇏"       =  _T.RIGHTWARDS_DOUBLE_ARROW_WITH_STROKE
const var"⇐"       =  _T.LEFTWARDS_DOUBLE_ARROW
const var"⇒"       =  _T.RIGHTWARDS_DOUBLE_ARROW
const var"⇔"       =  _T.LEFT_RIGHT_DOUBLE_ARROW
const var"⇴"       =  _T.RIGHT_ARROW_WITH_SMALL_CIRCLE
const var"⇶"       =  _T.THREE_RIGHTWARDS_ARROWS
const var"⇷"       =  _T.LEFTWARDS_ARROW_WITH_VERTICAL_STROKE
const var"⇸"       =  _T.RIGHTWARDS_ARROW_WITH_VERTICAL_STROKE
const var"⇹"       =  _T.LEFT_RIGHT_ARROW_WITH_VERTICAL_STROKE
const var"⇺"       =  _T.LEFTWARDS_ARROW_WITH_DOUBLE_VERTICAL_STROKE
const var"⇻"       =  _T.RIGHTWARDS_ARROW_WITH_DOUBLE_VERTICAL_STROKE
const var"⇼"       =  _T.LEFT_RIGHT_ARROW_WITH_DOUBLE_VERTICAL_STROKE
const var"⇽"       =  _T.LEFTWARDS_OPEN_HEADED_ARROW
const var"⇾"       =  _T.RIGHTWARDS_OPEN_HEADED_ARROW
const var"⇿"       =  _T.LEFT_RIGHT_OPEN_HEADED_ARROW
const var"⟵"       =  _T.LONG_LEFTWARDS_ARROW
const var"⟶"       =  _T.LONG_RIGHTWARDS_ARROW
const var"⟷"       =  _T.LONG_LEFT_RIGHT_ARROW
const var"⟹"       =  _T.LONG_RIGHTWARDS_DOUBLE_ARROW
const var"⟺"       =  _T.LONG_LEFT_RIGHT_DOUBLE_ARROW
const var"⟻"       =  _T.LONG_LEFTWARDS_ARROW_FROM_BAR
const var"⟼"       =  _T.LONG_RIGHTWARDS_ARROW_FROM_BAR
const var"⟽"       =  _T.LONG_LEFTWARDS_DOUBLE_ARROW_FROM_BAR
const var"⟾"       =  _T.LONG_RIGHTWARDS_DOUBLE_ARROW_FROM_BAR
const var"⟿"       =  _T.LONG_RIGHTWARDS_SQUIGGLE_ARROW
const var"⤀"       =  _T.RIGHTWARDS_TWO_HEADED_ARROW_WITH_VERTICAL_STROKE
const var"⤁"       =  _T.RIGHTWARDS_TWO_HEADED_ARROW_WITH_DOUBLE_VERTICAL_STROKE
const var"⤂"       =  _T.LEFTWARDS_DOUBLE_ARROW_WITH_VERTICAL_STROKE
const var"⤃"       =  _T.RIGHTWARDS_DOUBLE_ARROW_WITH_VERTICAL_STROKE
const var"⤄"       =  _T.LEFT_RIGHT_DOUBLE_ARROW_WITH_VERTICAL_STROKE
const var"⤅"       =  _T.RIGHTWARDS_TWO_HEADED_ARROW_FROM_BAR
const var"⤆"       =  _T.LEFTWARDS_DOUBLE_ARROW_FROM_BAR
const var"⤇"       =  _T.RIGHTWARDS_DOUBLE_ARROW_FROM_BAR
const var"⤌"       =  _T.LEFTWARDS_DOUBLE_DASH_ARROW
const var"⤍"       =  _T.RIGHTWARDS_DOUBLE_DASH_ARROW
const var"⤎"       =  _T.LEFTWARDS_TRIPLE_DASH_ARROW
const var"⤏"       =  _T.RIGHTWARDS_TRIPLE_DASH_ARROW
const var"⤐"       =  _T.RIGHTWARDS_TWO_HEADED_TRIPLE_DASH_ARROW
const var"⤑"       =  _T.RIGHTWARDS_ARROW_WITH_DOTTED_STEM
const var"⤔"       =  _T.RIGHTWARDS_ARROW_WITH_TAIL_WITH_VERTICAL_STROKE
const var"⤕"       =  _T.RIGHTWARDS_ARROW_WITH_TAIL_WITH_DOUBLE_VERTICAL_STROKE
const var"⤖"       =  _T.RIGHTWARDS_TWO_HEADED_ARROW_WITH_TAIL
const var"⤗"       =  _T.RIGHTWARDS_TWO_HEADED_ARROW_WITH_TAIL_WITH_VERTICAL_STROKE
const var"⤘"       =  _T.RIGHTWARDS_TWO_HEADED_ARROW_WITH_TAIL_WITH_DOUBLE_VERTICAL_STROKE
const var"⤝"       =  _T.LEFTWARDS_ARROW_TO_BLACK_DIAMOND
const var"⤞"       =  _T.RIGHTWARDS_ARROW_TO_BLACK_DIAMOND
const var"⤟"       =  _T.LEFTWARDS_ARROW_FROM_BAR_TO_BLACK_DIAMOND
const var"⤠"       =  _T.RIGHTWARDS_ARROW_FROM_BAR_TO_BLACK_DIAMOND
const var"⥄"       =  _T.SHORT_RIGHTWARDS_ARROW_ABOVE_LEFTWARDS_ARROW
const var"⥅"       =  _T.RIGHTWARDS_ARROW_WITH_PLUS_BELOW
const var"⥆"       =  _T.LEFTWARDS_ARROW_WITH_PLUS_BELOW
const var"⥇"       =  _T.RIGHTWARDS_ARROW_THROUGH_X
const var"⥈"       =  _T.LEFT_RIGHT_ARROW_THROUGH_SMALL_CIRCLE
const var"⥊"       =  _T.LEFT_BARB_UP_RIGHT_BARB_DOWN_HARPOON
const var"⥋"       =  _T.LEFT_BARB_DOWN_RIGHT_BARB_UP_HARPOON
const var"⥎"       =  _T.LEFT_BARB_UP_RIGHT_BARB_UP_HARPOON
const var"⥐"       =  _T.LEFT_BARB_DOWN_RIGHT_BARB_DOWN_HARPOON
const var"⥒"       =  _T.LEFTWARDS_HARPOON_WITH_BARB_UP_TO_BAR
const var"⥓"       =  _T.RIGHTWARDS_HARPOON_WITH_BARB_UP_TO_BAR
const var"⥖"       =  _T.LEFTWARDS_HARPOON_WITH_BARB_DOWN_TO_BAR
const var"⥗"       =  _T.RIGHTWARDS_HARPOON_WITH_BARB_DOWN_TO_BAR
const var"⥚"       =  _T.LEFTWARDS_HARPOON_WITH_BARB_UP_FROM_BAR
const var"⥛"       =  _T.RIGHTWARDS_HARPOON_WITH_BARB_UP_FROM_BAR
const var"⥞"       =  _T.LEFTWARDS_HARPOON_WITH_BARB_DOWN_FROM_BAR
const var"⥟"       =  _T.RIGHTWARDS_HARPOON_WITH_BARB_DOWN_FROM_BAR
const var"⥢"       =  _T.LEFTWARDS_HARPOON_WITH_BARB_UP_ABOVE_LEFTWARDS_HARPOON_WITH_BARB_DOWN
const var"⥤"       =  _T.RIGHTWARDS_HARPOON_WITH_BARB_UP_ABOVE_RIGHTWARDS_HARPOON_WITH_BARB_DOWN
const var"⥦"       =  _T.LEFTWARDS_HARPOON_WITH_BARB_UP_ABOVE_RIGHTWARDS_HARPOON_WITH_BARB_UP
const var"⥧"       =  _T.LEFTWARDS_HARPOON_WITH_BARB_DOWN_ABOVE_RIGHTWARDS_HARPOON_WITH_BARB_DOWN
const var"⥨"       =  _T.RIGHTWARDS_HARPOON_WITH_BARB_UP_ABOVE_LEFTWARDS_HARPOON_WITH_BARB_UP
const var"⥩"       =  _T.RIGHTWARDS_HARPOON_WITH_BARB_DOWN_ABOVE_LEFTWARDS_HARPOON_WITH_BARB_DOWN
const var"⥪"       =  _T.LEFTWARDS_HARPOON_WITH_BARB_UP_ABOVE_LONG_DASH
const var"⥫"       =  _T.LEFTWARDS_HARPOON_WITH_BARB_DOWN_BELOW_LONG_DASH
const var"⥬"       =  _T.RIGHTWARDS_HARPOON_WITH_BARB_UP_ABOVE_LONG_DASH
const var"⥭"       =  _T.RIGHTWARDS_HARPOON_WITH_BARB_DOWN_BELOW_LONG_DASH
const var"⥰"       =  _T.RIGHT_DOUBLE_ARROW_WITH_ROUNDED_HEAD
const var"⧴"       =  _T.RULE_DELAYED
const var"⬱"       =  _T.THREE_LEFTWARDS_ARROWS
const var"⬰"       =  _T.LEFT_ARROW_WITH_SMALL_CIRCLE
const var"⬲"       =  _T.LEFT_ARROW_WITH_CIRCLED_PLUS
const var"⬳"       =  _T.LONG_LEFTWARDS_SQUIGGLE_ARROW
const var"⬴"       =  _T.LEFTWARDS_TWO_HEADED_ARROW_WITH_VERTICAL_STROKE
const var"⬵"       =  _T.LEFTWARDS_TWO_HEADED_ARROW_WITH_DOUBLE_VERTICAL_STROKE
const var"⬶"       =  _T.LEFTWARDS_TWO_HEADED_ARROW_FROM_BAR
const var"⬷"       =  _T.LEFTWARDS_TWO_HEADED_TRIPLE_DASH_ARROW
const var"⬸"       =  _T.LEFTWARDS_ARROW_WITH_DOTTED_STEM
const var"⬹"       =  _T.LEFTWARDS_ARROW_WITH_TAIL_WITH_VERTICAL_STROKE
const var"⬺"       =  _T.LEFTWARDS_ARROW_WITH_TAIL_WITH_DOUBLE_VERTICAL_STROKE
const var"⬻"       =  _T.LEFTWARDS_TWO_HEADED_ARROW_WITH_TAIL
const var"⬼"       =  _T.LEFTWARDS_TWO_HEADED_ARROW_WITH_TAIL_WITH_VERTICAL_STROKE
const var"⬽"       =  _T.LEFTWARDS_TWO_HEADED_ARROW_WITH_TAIL_WITH_DOUBLE_VERTICAL_STROKE
const var"⬾"       =  _T.LEFTWARDS_ARROW_THROUGH_X
const var"⬿"       =  _T.WAVE_ARROW_POINTING_DIRECTLY_LEFT
const var"⭀"       =  _T.EQUALS_SIGN_ABOVE_LEFTWARDS_ARROW
const var"⭁"       =  _T.REVERSE_TILDE_OPERATOR_ABOVE_LEFTWARDS_ARROW
const var"⭂"       =  _T.LEFTWARDS_ARROW_ABOVE_REVERSE_ALMOST_EQUAL_TO
const var"⭃"       =  _T.RIGHTWARDS_ARROW_THROUGH_GREATER_THAN
const var"⭄"       =  _T.RIGHTWARDS_ARROW_THROUGH_SUPERSET
const var"⭇"       =  _T.REVERSE_TILDE_OPERATOR_ABOVE_RIGHTWARDS_ARROW
const var"⭈"       =  _T.RIGHTWARDS_ARROW_ABOVE_REVERSE_ALMOST_EQUAL_TO
const var"⭉"       =  _T.TILDE_OPERATOR_ABOVE_LEFTWARDS_ARROW
const var"⭊"       =  _T.LEFTWARDS_ARROW_ABOVE_ALMOST_EQUAL_TO
const var"⭋"       =  _T.LEFTWARDS_ARROW_ABOVE_REVERSE_TILDE_OPERATOR
const var"⭌"       =  _T.RIGHTWARDS_ARROW_ABOVE_REVERSE_TILDE_OPERATOR
const var"￩"       =  _T.HALFWIDTH_LEFTWARDS_ARROW
const var"￫"       =  _T.HALFWIDTH_RIGHTWARDS_ARROW
const var"↻"       =  _T.CIRCLE_ARROW_RIGHT
const var"⇜"       =  _T.LEFT_SQUIGGLE_ARROW
const var"⇝"       =  _T.RIGHT_SQUIGGLE_ARROW
const var"↜"       =  _T.LEFT_WAVE_ARROW
const var"↝"       =  _T.RIGHT_WAVE_ARROW
const var"↩"       =  _T.LEFTWARDS_ARROW_WITH_HOOK
const var"↪"       =  _T.RIGHTWARDS_ARROW_WITH_HOOK
const var"↫"       =  _T.LOOP_ARROW_LEFT
const var"↬"       =  _T.LOOP_ARROW_RIGHT
const var"↼"       =  _T.LEFT_HARPOON_UP
const var"↽"       =  _T.LEFT_HARPOON_DOWN
const var"⇀"       =  _T.RIGHT_HARPOON_UP
const var"⇁"       =  _T.RIGHT_HARPOON_DOWN
const var"⇄"       =  _T.RIGHT_LEFT_ARROWS
const var"⇆"       =  _T.LEFT_RIGHT_ARROWS
const var"⇇"       =  _T.LEFT_LEFT_ARROWS
const var"⇉"       =  _T.RIGHT_RIGHT_ARROWS
const var"⇋"       =  _T.LEFT_RIGHT_HARPOONS
const var"⇌"       =  _T.RIGHT_LEFT_HARPOONS
const var"⇚"       =  _T.L_LEFT_ARROW
const var"⇛"       =  _T.R_RIGHT_ARROW
const var"⇠"       =  _T.LEFT_DASH_ARROW
const var"⇢"       =  _T.RIGHT_DASH_ARROW
const var"↷"       =  _T.CURVE_ARROW_RIGHT
const var"↶"       =  _T.CURVE_ARROW_LEFT
const var"↺"       =  _T.CIRCLE_ARROW_LEFT
const END_ARROW    =  _T.end_arrow

# Level 4
const BEGIN_LAZYOR = _T.begin_lazyor
const var"||"      = _T.LAZY_OR
const END_LAZYOR   = _T.end_lazyor

# Level 5
const BEGIN_LAZYAND = _T.begin_lazyand
const var"&&"       = _T.LAZY_AND
const END_LAZYAND   = _T.end_lazyand

# Level 6
const BEGIN_COMPARISON = _T.begin_comparison
const var"<:"   =  _T.ISSUBTYPE
const var">:"   =  _T.ISSUPERTYPE
const var">"    =  _T.GREATER
const var"<"    =  _T.LESS
const var">="   =  _T.GREATER_EQ
const var"≥"    =  _T.GREATER_THAN_OR_EQUAL_TO
const var"<="   =  _T.LESS_EQ
const var"≤"    =  _T.LESS_THAN_OR_EQUAL_TO
const var"=="   =  _T.EQEQ
const var"==="  =  _T.EQEQEQ
const var"≡"    =  _T.IDENTICAL_TO
const var"!="   =  _T.NOT_EQ
const var"≠"    =  _T.NOT_EQUAL_TO
const var"!=="  =  _T.NOT_IS
const var"≢"    =  _T.NOT_IDENTICAL_TO
const var"∈"    =  _T.ELEMENT_OF
const var"in"   =  _T.IN
const var"isa"  =  _T.ISA
const var"∉"    =  _T.NOT_AN_ELEMENT_OF
const var"∋"    =  _T.CONTAINS_AS_MEMBER
const var"∌"    =  _T.DOES_NOT_CONTAIN_AS_MEMBER
const var"⊆"    =  _T.SUBSET_OF_OR_EQUAL_TO
const var"⊈"    =  _T.NEITHER_A_SUBSET_OF_NOR_EQUAL_TO
const var"⊂"    =  _T.SUBSET_OF
const var"⊄"    =  _T.NOT_A_SUBSET_OF
const var"⊊"    =  _T.SUBSET_OF_WITH_NOT_EQUAL_TO
const var"∝"    =  _T.PROPORTIONAL_TO
const var"∊"    =  _T.SMALL_ELEMENT_OF
const var"∍"    =  _T.SMALL_CONTAINS_AS_MEMBER
const var"∥"    =  _T.PARALLEL_TO
const var"∦"    =  _T.NOT_PARALLEL_TO
const var"∷"    =  _T.PROPORTION
const var"∺"    =  _T.GEOMETRIC_PROPORTION
const var"∻"    =  _T.HOMOTHETIC
const var"∽"    =  _T.REVERSED_TILDE
const var"∾"    =  _T.INVERTED_LAZY_S
const var"≁"    =  _T.NOT_TILDE
const var"≃"    =  _T.ASYMPTOTICALLY_EQUAL_TO
const var"≄"    =  _T.NOT_ASYMPTOTICALLY_EQUAL_TO
const var"≅"    =  _T.APPROXIMATELY_EQUAL_TO
const var"≆"    =  _T.APPROXIMATELY_BUT_NOT_ACTUALLY_EQUAL_TO
const var"≇"    =  _T.NEITHER_APPROXIMATELY_NOR_ACTUALLY_EQUAL_TO
const var"≈"    =  _T.ALMOST_EQUAL_TO
const var"≉"    =  _T.NOT_ALMOST_EQUAL_TO
const var"≊"    =  _T.ALMOST_EQUAL_OR_EQUAL_TO
const var"≋"    =  _T.TRIPLE_TILDE
const var"≌"    =  _T.ALL_EQUAL_TO
const var"≍"    =  _T.EQUIVALENT_TO
const var"≎"    =  _T.GEOMETRICALLY_EQUIVALENT_TO
const var"≐"    =  _T.APPROACHES_THE_LIMIT
const var"≑"    =  _T.GEOMETRICALLY_EQUAL_TO
const var"≒"    =  _T.APPROXIMATELY_EQUAL_TO_OR_THE_IMAGE_OF
const var"≓"    =  _T.IMAGE_OF_OR_APPROXIMATELY_EQUAL_TO
const var"≔"    =  _T.COLON_EQUALS
const var"≕"    =  _T.EQUALS_COLON
const var"≖"    =  _T.RING_IN_EQUAL_TO
const var"≗"    =  _T.RING_EQUAL_TO
const var"≘"    =  _T.CORRESPONDS_TO
const var"≙"    =  _T.ESTIMATES
const var"≚"    =  _T.EQUIANGULAR_TO
const var"≛"    =  _T.STAR_EQUALS
const var"≜"    =  _T.DELTA_EQUAL_TO
const var"≝"    =  _T.EQUAL_TO_BY_DEFINITION
const var"≞"    =  _T.MEASURED_BY
const var"≟"    =  _T.QUESTIONED_EQUAL_TO
const var"≣"    =  _T.STRICTLY_EQUIVALENT_TO
const var"≦"    =  _T.LESS_THAN_OVER_EQUAL_TO
const var"≧"    =  _T.GREATER_THAN_OVER_EQUAL_TO
const var"≨"    =  _T.LESS_THAN_BUT_NOT_EQUAL_TO
const var"≩"    =  _T.GREATER_THAN_BUT_NOT_EQUAL_TO
const var"≪"    =  _T.MUCH_LESS_THAN
const var"≫"    =  _T.MUCH_GREATER_THAN
const var"≬"    =  _T.BETWEEN
const var"≭"    =  _T.NOT_EQUIVALENT_TO
const var"≮"    =  _T.NOT_LESS_THAN
const var"≯"    =  _T.NOT_GREATER_THAN
const var"≰"    =  _T.NEITHER_LESS_THAN_NOR_EQUAL_TO
const var"≱"    =  _T.NEITHER_GREATER_THAN_NOR_EQUAL_TO
const var"≲"    =  _T.LESS_THAN_OR_EQUIVALENT_TO
const var"≳"    =  _T.GREATER_THAN_OR_EQUIVALENT_TO
const var"≴"    =  _T.NEITHER_LESS_THAN_NOR_EQUIVALENT_TO
const var"≵"    =  _T.NEITHER_GREATER_THAN_NOR_EQUIVALENT_TO
const var"≶"    =  _T.LESS_THAN_OR_GREATER_THAN
const var"≷"    =  _T.GREATER_THAN_OR_LESS_THAN
const var"≸"    =  _T.NEITHER_LESS_THAN_NOR_GREATER_THAN
const var"≹"    =  _T.NEITHER_GREATER_THAN_NOR_LESS_THAN
const var"≺"    =  _T.PRECEDES
const var"≻"    =  _T.SUCCEEDS
const var"≼"    =  _T.PRECEDES_OR_EQUAL_TO
const var"≽"    =  _T.SUCCEEDS_OR_EQUAL_TO
const var"≾"    =  _T.PRECEDES_OR_EQUIVALENT_TO
const var"≿"    =  _T.SUCCEEDS_OR_EQUIVALENT_TO
const var"⊀"    =  _T.DOES_NOT_PRECEDE
const var"⊁"    =  _T.DOES_NOT_SUCCEED
const var"⊃"    =  _T.SUPERSET_OF
const var"⊅"    =  _T.NOT_A_SUPERSET_OF
const var"⊇"    =  _T.SUPERSET_OF_OR_EQUAL_TO
const var"⊉"    =  _T.NEITHER_A_SUPERSET_OF_NOR_EQUAL_TO
const var"⊋"    =  _T.SUPERSET_OF_WITH_NOT_EQUAL_TO
const var"⊏"    =  _T.SQUARE_IMAGE_OF
const var"⊐"    =  _T.SQUARE_ORIGINAL_OF
const var"⊑"    =  _T.SQUARE_IMAGE_OF_OR_EQUAL_TO
const var"⊒"    =  _T.SQUARE_ORIGINAL_OF_OR_EQUAL_TO
const var"⊜"    =  _T.CIRCLED_EQUALS
const var"⊩"    =  _T.FORCES
const var"⊬"    =  _T.DOES_NOT_PROVE
const var"⊮"    =  _T.DOES_NOT_FORCE
const var"⊰"    =  _T.PRECEDES_UNDER_RELATION
const var"⊱"    =  _T.SUCCEEDS_UNDER_RELATION
const var"⊲"    =  _T.NORMAL_SUBGROUP_OF
const var"⊳"    =  _T.CONTAINS_AS_NORMAL_SUBGROUP
const var"⊴"    =  _T.NORMAL_SUBGROUP_OF_OR_EQUAL_TO
const var"⊵"    =  _T.CONTAINS_AS_NORMAL_SUBGROUP_OR_EQUAL_TO
const var"⊶"    =  _T.ORIGINAL_OF
const var"⊷"    =  _T.IMAGE_OF
const var"⋍"    =  _T.REVERSED_TILDE_EQUALS
const var"⋐"    =  _T.DOUBLE_SUBSET
const var"⋑"    =  _T.DOUBLE_SUPERSET
const var"⋕"    =  _T.EQUAL_AND_PARALLEL_TO
const var"⋖"    =  _T.LESS_THAN_WITH_DOT
const var"⋗"    =  _T.GREATER_THAN_WITH_DOT
const var"⋘"    =  _T.VERY_MUCH_LESS_THAN
const var"⋙"    =  _T.VERY_MUCH_GREATER_THAN
const var"⋚"    =  _T.LESS_THAN_EQUAL_TO_OR_GREATER_THAN
const var"⋛"    =  _T.GREATER_THAN_EQUAL_TO_OR_LESS_THAN
const var"⋜"    =  _T.EQUAL_TO_OR_LESS_THAN
const var"⋝"    =  _T.EQUAL_TO_OR_GREATER_THAN
const var"⋞"    =  _T.EQUAL_TO_OR_PRECEDES
const var"⋟"    =  _T.EQUAL_TO_OR_SUCCEEDS
const var"⋠"    =  _T.DOES_NOT_PRECEDE_OR_EQUAL
const var"⋡"    =  _T.DOES_NOT_SUCCEED_OR_EQUAL
const var"⋢"    =  _T.NOT_SQUARE_IMAGE_OF_OR_EQUAL_TO
const var"⋣"    =  _T.NOT_SQUARE_ORIGINAL_OF_OR_EQUAL_TO
const var"⋤"    =  _T.SQUARE_IMAGE_OF_OR_NOT_EQUAL_TO
const var"⋥"    =  _T.SQUARE_ORIGINAL_OF_OR_NOT_EQUAL_TO
const var"⋦"    =  _T.LESS_THAN_BUT_NOT_EQUIVALENT_TO
const var"⋧"    =  _T.GREATER_THAN_BUT_NOT_EQUIVALENT_TO
const var"⋨"    =  _T.PRECEDES_BUT_NOT_EQUIVALENT_TO
const var"⋩"    =  _T.SUCCEEDS_BUT_NOT_EQUIVALENT_TO
const var"⋪"    =  _T.NOT_NORMAL_SUBGROUP_OF
const var"⋫"    =  _T.DOES_NOT_CONTAIN_AS_NORMAL_SUBGROUP
const var"⋬"    =  _T.NOT_NORMAL_SUBGROUP_OF_OR_EQUAL_TO
const var"⋭"    =  _T.DOES_NOT_CONTAIN_AS_NORMAL_SUBGROUP_OR_EQUAL
const var"⋲"    =  _T.ELEMENT_OF_WITH_LONG_HORIZONTAL_STROKE
const var"⋳"    =  _T.ELEMENT_OF_WITH_VERTICAL_BAR_AT_END_OF_HORIZONTAL_STROKE
const var"⋴"    =  _T.SMALL_ELEMENT_OF_WITH_VERTICAL_BAR_AT_END_OF_HORIZONTAL_STROKE
const var"⋵"    =  _T.ELEMENT_OF_WITH_DOT_ABOVE
const var"⋶"    =  _T.ELEMENT_OF_WITH_OVERBAR
const var"⋷"    =  _T.SMALL_ELEMENT_OF_WITH_OVERBAR
const var"⋸"    =  _T.ELEMENT_OF_WITH_UNDERBAR
const var"⋹"    =  _T.ELEMENT_OF_WITH_TWO_HORIZONTAL_STROKES
const var"⋺"    =  _T.CONTAINS_WITH_LONG_HORIZONTAL_STROKE
const var"⋻"    =  _T.CONTAINS_WITH_VERTICAL_BAR_AT_END_OF_HORIZONTAL_STROKE
const var"⋼"    =  _T.SMALL_CONTAINS_WITH_VERTICAL_BAR_AT_END_OF_HORIZONTAL_STROKE
const var"⋽"    =  _T.CONTAINS_WITH_OVERBAR
const var"⋾"    =  _T.SMALL_CONTAINS_WITH_OVERBAR
const var"⋿"    =  _T.Z_NOTATION_BAG_MEMBERSHIP
const var"⟈"    =  _T.REVERSE_SOLIDUS_PRECEDING_SUBSET
const var"⟉"    =  _T.SUPERSET_PRECEDING_SOLIDUS
const var"⟒"    =  _T.ELEMENT_OF_OPENING_UPWARDS
const var"⦷"    =  _T.CIRCLED_PARALLEL
const var"⧀"    =  _T.CIRCLED_LESS_THAN
const var"⧁"    =  _T.CIRCLED_GREATER_THAN
const var"⧡"    =  _T.INCREASES_AS
const var"⧣"    =  _T.EQUALS_SIGN_AND_SLANTED_PARALLEL
const var"⧤"    =  _T.EQUALS_SIGN_AND_SLANTED_PARALLEL_WITH_TILDE_ABOVE
const var"⧥"    =  _T.IDENTICAL_TO_AND_SLANTED_PARALLEL
const var"⩦"    =  _T.EQUALS_SIGN_WITH_DOT_BELOW
const var"⩧"    =  _T.IDENTICAL_WITH_DOT_ABOVE
const var"⩪"    =  _T.TILDE_OPERATOR_WITH_DOT_ABOVE
const var"⩫"    =  _T.TILDE_OPERATOR_WITH_RISING_DOTS
const var"⩬"    =  _T.SIMILAR_MINUS_SIMILAR
const var"⩭"    =  _T.CONGRUENT_WITH_DOT_ABOVE
const var"⩮"    =  _T.EQUALS_WITH_ASTERISK
const var"⩯"    =  _T.ALMOST_EQUAL_TO_WITH_CIRCUMFLEX_ACCENT
const var"⩰"    =  _T.APPROXIMATELY_EQUAL_OR_EQUAL_TO
const var"⩱"    =  _T.EQUALS_SIGN_ABOVE_PLUS_SIGN
const var"⩲"    =  _T.PLUS_SIGN_ABOVE_EQUALS_SIGN
const var"⩳"    =  _T.EQUALS_SIGN_ABOVE_TILDE_OPERATOR
const var"⩴"    =  _T.DOUBLE_COLON_EQUAL
const var"⩵"    =  _T.TWO_CONSECUTIVE_EQUALS_SIGNS
const var"⩶"    =  _T.THREE_CONSECUTIVE_EQUALS_SIGNS
const var"⩷"    =  _T.EQUALS_SIGN_WITH_TWO_DOTS_ABOVE_AND_TWO_DOTS_BELOW
const var"⩸"    =  _T.EQUIVALENT_WITH_FOUR_DOTS_ABOVE
const var"⩹"    =  _T.LESS_THAN_WITH_CIRCLE_INSIDE
const var"⩺"    =  _T.GREATER_THAN_WITH_CIRCLE_INSIDE
const var"⩻"    =  _T.LESS_THAN_WITH_QUESTION_MARK_ABOVE
const var"⩼"    =  _T.GREATER_THAN_WITH_QUESTION_MARK_ABOVE
const var"⩽"    =  _T.LESS_THAN_OR_SLANTED_EQUAL_TO
const var"⩾"    =  _T.GREATER_THAN_OR_SLANTED_EQUAL_TO
const var"⩿"    =  _T.LESS_THAN_OR_SLANTED_EQUAL_TO_WITH_DOT_INSIDE
const var"⪀"    =  _T.GREATER_THAN_OR_SLANTED_EQUAL_TO_WITH_DOT_INSIDE
const var"⪁"    =  _T.LESS_THAN_OR_SLANTED_EQUAL_TO_WITH_DOT_ABOVE
const var"⪂"    =  _T.GREATER_THAN_OR_SLANTED_EQUAL_TO_WITH_DOT_ABOVE
const var"⪃"    =  _T.LESS_THAN_OR_SLANTED_EQUAL_TO_WITH_DOT_ABOVE_RIGHT
const var"⪄"    =  _T.GREATER_THAN_OR_SLANTED_EQUAL_TO_WITH_DOT_ABOVE_LEFT
const var"⪅"    =  _T.LESS_THAN_OR_APPROXIMATE
const var"⪆"    =  _T.GREATER_THAN_OR_APPROXIMATE
const var"⪇"    =  _T.LESS_THAN_AND_SINGLE_LINE_NOT_EQUAL_TO
const var"⪈"    =  _T.GREATER_THAN_AND_SINGLE_LINE_NOT_EQUAL_TO
const var"⪉"    =  _T.LESS_THAN_AND_NOT_APPROXIMATE
const var"⪊"    =  _T.GREATER_THAN_AND_NOT_APPROXIMATE
const var"⪋"    =  _T.LESS_THAN_ABOVE_DOUBLE_LINE_EQUAL_ABOVE_GREATER_THAN
const var"⪌"    =  _T.GREATER_THAN_ABOVE_DOUBLE_LINE_EQUAL_ABOVE_LESS_THAN
const var"⪍"    =  _T.LESS_THAN_ABOVE_SIMILAR_OR_EQUAL
const var"⪎"    =  _T.GREATER_THAN_ABOVE_SIMILAR_OR_EQUAL
const var"⪏"    =  _T.LESS_THAN_ABOVE_SIMILAR_ABOVE_GREATER_THAN
const var"⪐"    =  _T.GREATER_THAN_ABOVE_SIMILAR_ABOVE_LESS_THAN
const var"⪑"    =  _T.LESS_THAN_ABOVE_GREATER_THAN_ABOVE_DOUBLE_LINE_EQUAL
const var"⪒"    =  _T.GREATER_THAN_ABOVE_LESS_THAN_ABOVE_DOUBLE_LINE_EQUAL
const var"⪓"    =  _T.LESS_THAN_ABOVE_SLANTED_EQUAL_ABOVE_GREATER_THAN_ABOVE_SLANTED_EQUAL
const var"⪔"    =  _T.GREATER_THAN_ABOVE_SLANTED_EQUAL_ABOVE_LESS_THAN_ABOVE_SLANTED_EQUAL
const var"⪕"    =  _T.SLANTED_EQUAL_TO_OR_LESS_THAN
const var"⪖"    =  _T.SLANTED_EQUAL_TO_OR_GREATER_THAN
const var"⪗"    =  _T.SLANTED_EQUAL_TO_OR_LESS_THAN_WITH_DOT_INSIDE
const var"⪘"    =  _T.SLANTED_EQUAL_TO_OR_GREATER_THAN_WITH_DOT_INSIDE
const var"⪙"    =  _T.DOUBLE_LINE_EQUAL_TO_OR_LESS_THAN
const var"⪚"    =  _T.DOUBLE_LINE_EQUAL_TO_OR_GREATER_THAN
const var"⪛"    =  _T.DOUBLE_LINE_SLANTED_EQUAL_TO_OR_LESS_THAN
const var"⪜"    =  _T.DOUBLE_LINE_SLANTED_EQUAL_TO_OR_GREATER_THAN
const var"⪝"    =  _T.SIMILAR_OR_LESS_THAN
const var"⪞"    =  _T.SIMILAR_OR_GREATER_THAN
const var"⪟"    =  _T.SIMILAR_ABOVE_LESS_THAN_ABOVE_EQUALS_SIGN
const var"⪠"    =  _T.SIMILAR_ABOVE_GREATER_THAN_ABOVE_EQUALS_SIGN
const var"⪡"    =  _T.DOUBLE_NESTED_LESS_THAN
const var"⪢"    =  _T.DOUBLE_NESTED_GREATER_THAN
const var"⪣"    =  _T.DOUBLE_NESTED_LESS_THAN_WITH_UNDERBAR
const var"⪤"    =  _T.GREATER_THAN_OVERLAPPING_LESS_THAN
const var"⪥"    =  _T.GREATER_THAN_BESIDE_LESS_THAN
const var"⪦"    =  _T.LESS_THAN_CLOSED_BY_CURVE
const var"⪧"    =  _T.GREATER_THAN_CLOSED_BY_CURVE
const var"⪨"    =  _T.LESS_THAN_CLOSED_BY_CURVE_ABOVE_SLANTED_EQUAL
const var"⪩"    =  _T.GREATER_THAN_CLOSED_BY_CURVE_ABOVE_SLANTED_EQUAL
const var"⪪"    =  _T.SMALLER_THAN
const var"⪫"    =  _T.LARGER_THAN
const var"⪬"    =  _T.SMALLER_THAN_OR_EQUAL_TO
const var"⪭"    =  _T.LARGER_THAN_OR_EQUAL_TO
const var"⪮"    =  _T.EQUALS_SIGN_WITH_BUMPY_ABOVE
const var"⪯"    =  _T.PRECEDES_ABOVE_SINGLE_LINE_EQUALS_SIGN
const var"⪰"    =  _T.SUCCEEDS_ABOVE_SINGLE_LINE_EQUALS_SIGN
const var"⪱"    =  _T.PRECEDES_ABOVE_SINGLE_LINE_NOT_EQUAL_TO
const var"⪲"    =  _T.SUCCEEDS_ABOVE_SINGLE_LINE_NOT_EQUAL_TO
const var"⪳"    =  _T.PRECEDES_ABOVE_EQUALS_SIGN
const var"⪴"    =  _T.SUCCEEDS_ABOVE_EQUALS_SIGN
const var"⪵"    =  _T.PRECEDES_ABOVE_NOT_EQUAL_TO
const var"⪶"    =  _T.SUCCEEDS_ABOVE_NOT_EQUAL_TO
const var"⪷"    =  _T.PRECEDES_ABOVE_ALMOST_EQUAL_TO
const var"⪸"    =  _T.SUCCEEDS_ABOVE_ALMOST_EQUAL_TO
const var"⪹"    =  _T.PRECEDES_ABOVE_NOT_ALMOST_EQUAL_TO
const var"⪺"    =  _T.SUCCEEDS_ABOVE_NOT_ALMOST_EQUAL_TO
const var"⪻"    =  _T.DOUBLE_PRECEDES
const var"⪼"    =  _T.DOUBLE_SUCCEEDS
const var"⪽"    =  _T.SUBSET_WITH_DOT
const var"⪾"    =  _T.SUPERSET_WITH_DOT
const var"⪿"    =  _T.SUBSET_WITH_PLUS_SIGN_BELOW
const var"⫀"    =  _T.SUPERSET_WITH_PLUS_SIGN_BELOW
const var"⫁"    =  _T.SUBSET_WITH_MULTIPLICATION_SIGN_BELOW
const var"⫂"    =  _T.SUPERSET_WITH_MULTIPLICATION_SIGN_BELOW
const var"⫃"    =  _T.SUBSET_OF_OR_EQUAL_TO_WITH_DOT_ABOVE
const var"⫄"    =  _T.SUPERSET_OF_OR_EQUAL_TO_WITH_DOT_ABOVE
const var"⫅"    =  _T.SUBSET_OF_ABOVE_EQUALS_SIGN
const var"⫆"    =  _T.SUPERSET_OF_ABOVE_EQUALS_SIGN
const var"⫇"    =  _T.SUBSET_OF_ABOVE_TILDE_OPERATOR
const var"⫈"    =  _T.SUPERSET_OF_ABOVE_TILDE_OPERATOR
const var"⫉"    =  _T.SUBSET_OF_ABOVE_ALMOST_EQUAL_TO
const var"⫊"    =  _T.SUPERSET_OF_ABOVE_ALMOST_EQUAL_TO
const var"⫋"    =  _T.SUBSET_OF_ABOVE_NOT_EQUAL_TO
const var"⫌"    =  _T.SUPERSET_OF_ABOVE_NOT_EQUAL_TO
const var"⫍"    =  _T.SQUARE_LEFT_OPEN_BOX_OPERATOR
const var"⫎"    =  _T.SQUARE_RIGHT_OPEN_BOX_OPERATOR
const var"⫏"    =  _T.CLOSED_SUBSET
const var"⫐"    =  _T.CLOSED_SUPERSET
const var"⫑"    =  _T.CLOSED_SUBSET_OR_EQUAL_TO
const var"⫒"    =  _T.CLOSED_SUPERSET_OR_EQUAL_TO
const var"⫓"    =  _T.SUBSET_ABOVE_SUPERSET
const var"⫔"    =  _T.SUPERSET_ABOVE_SUBSET
const var"⫕"    =  _T.SUBSET_ABOVE_SUBSET
const var"⫖"    =  _T.SUPERSET_ABOVE_SUPERSET
const var"⫗"    =  _T.SUPERSET_BESIDE_SUBSET
const var"⫘"    =  _T.SUPERSET_BESIDE_AND_JOINED_BY_DASH_WITH_SUBSET
const var"⫙"    =  _T.ELEMENT_OF_OPENING_DOWNWARDS
const var"⫷"    =  _T.TRIPLE_NESTED_LESS_THAN
const var"⫸"    =  _T.TRIPLE_NESTED_GREATER_THAN
const var"⫹"    =  _T.DOUBLE_LINE_SLANTED_LESS_THAN_OR_EQUAL_TO
const var"⫺"    =  _T.DOUBLE_LINE_SLANTED_GREATER_THAN_OR_EQUAL_TO
const var"⊢"    =  _T.RIGHT_TACK
const var"⊣"    =  _T.LEFT_TACK
const var"⟂"    =  _T.PERP
const END_COMPARISON = _T.end_comparison

# Level 7
const BEGIN_PIPE  =  _T.begin_pipe
const var"|>"     =  _T.LPIPE
const var"<|"     =  _T.RPIPE
const END_PIPE    =  _T.end_pipe

# Level 8
const BEGIN_COLON  =  _T.begin_colon
const var":"       =  _T.COLON
const var".."      =  _T.DDOT
const var"…"       =  _T.LDOTS
const var"⁝"       =  _T.TRICOLON
const var"⋮"       =  _T.VDOTS
const var"⋱"       =  _T.DDOTS
const var"⋰"       =  _T.ADOTS
const var"⋯"       =  _T.CDOTS
const END_COLON    =  _T.end_colon

# Level 9
const BEGIN_PLUS  =  _T.begin_plus
const var"$"   =  _T.EX_OR
const var"+"   =  _T.PLUS
const var"-"   =  _T.MINUS
const var"++"  =  _T.PLUSPLUS
const var"⊕"   =  _T.CIRCLED_PLUS
const var"⊖"   =  _T.CIRCLED_MINUS
const var"⊞"   =  _T.SQUARED_PLUS
const var"⊟"   =  _T.SQUARED_MINUS
const var"|"   =  _T.OR
const var"∪"   =  _T.UNION
const var"∨"   =  _T.LOGICAL_OR
const var"⊔"   =  _T.SQUARE_CUP
const var"±"   =  _T.PLUS_MINUS_SIGN
const var"∓"   =  _T.MINUS_OR_PLUS_SIGN
const var"∔"   =  _T.DOT_PLUS
const var"∸"   =  _T.DOT_MINUS
const var"≂"   =  _T.MINUS_TILDE
const var"≏"   =  _T.DIFFERENCE_BETWEEN
const var"⊎"   =  _T.MULTISET_UNION
const var"⊻"   =  _T.XOR
const var"⊽"   =  _T.NOR
const var"⋎"   =  _T.CURLY_LOGICAL_OR
const var"⋓"   =  _T.DOUBLE_UNION
const var"⧺"   =  _T.DOUBLE_PLUS
const var"⧻"   =  _T.TRIPLE_PLUS
const var"⨈"   =  _T.TWO_LOGICAL_OR_OPERATOR
const var"⨢"   =  _T.PLUS_SIGN_WITH_SMALL_CIRCLE_ABOVE
const var"⨣"   =  _T.PLUS_SIGN_WITH_CIRCUMFLEX_ACCENT_ABOVE
const var"⨤"   =  _T.PLUS_SIGN_WITH_TILDE_ABOVE
const var"⨥"   =  _T.PLUS_SIGN_WITH_DOT_BELOW
const var"⨦"   =  _T.PLUS_SIGN_WITH_TILDE_BELOW
const var"⨧"   =  _T.PLUS_SIGN_WITH_SUBSCRIPT_TWO
const var"⨨"   =  _T.PLUS_SIGN_WITH_BLACK_TRIANGLE
const var"⨩"   =  _T.MINUS_SIGN_WITH_COMMA_ABOVE
const var"⨪"   =  _T.MINUS_SIGN_WITH_DOT_BELOW
const var"⨫"   =  _T.MINUS_SIGN_WITH_FALLING_DOTS
const var"⨬"   =  _T.MINUS_SIGN_WITH_RISING_DOTS
const var"⨭"   =  _T.PLUS_SIGN_IN_LEFT_HALF_CIRCLE
const var"⨮"   =  _T.PLUS_SIGN_IN_RIGHT_HALF_CIRCLE
const var"⨹"   =  _T.PLUS_SIGN_IN_TRIANGLE
const var"⨺"   =  _T.MINUS_SIGN_IN_TRIANGLE
const var"⩁"   =  _T.UNION_WITH_MINUS_SIGN
const var"⩂"   =  _T.UNION_WITH_OVERBAR
const var"⩅"   =  _T.UNION_WITH_LOGICAL_OR
const var"⩊"   =  _T.UNION_BESIDE_AND_JOINED_WITH_UNION
const var"⩌"   =  _T.CLOSED_UNION_WITH_SERIFS
const var"⩏"   =  _T.DOUBLE_SQUARE_UNION
const var"⩐"   =  _T.CLOSED_UNION_WITH_SERIFS_AND_SMASH_PRODUCT
const var"⩒"   =  _T.LOGICAL_OR_WITH_DOT_ABOVE
const var"⩔"   =  _T.DOUBLE_LOGICAL_OR
const var"⩖"   =  _T.TWO_INTERSECTING_LOGICAL_OR
const var"⩗"   =  _T.SLOPING_LARGE_OR
const var"⩛"   =  _T.LOGICAL_OR_WITH_MIDDLE_STEM
const var"⩝"   =  _T.LOGICAL_OR_WITH_HORIZONTAL_DASH
const var"⩡"   =  _T.SMALL_VEE_WITH_UNDERBAR
const var"⩢"   =  _T.LOGICAL_OR_WITH_DOUBLE_OVERBAR
const var"⩣"   =  _T.LOGICAL_OR_WITH_DOUBLE_UNDERBAR
const var"¦"   =  _T.BROKEN_BAR
const END_PLUS    =  _T.end_plus

# Level 10
const BEGIN_BITSHIFTS  =  _T.begin_bitshifts
const var"<<"          =  _T.LBITSHIFT
const var">>"          =  _T.RBITSHIFT
const var">>>"         =  _T.UNSIGNED_BITSHIFT
const END_BITSHIFTS    =  _T.end_bitshifts

# Level 11
const BEGIN_TIMES  =  _T.begin_times
const var"*"       =  _T.STAR
const var"/"       =  _T.FWD_SLASH
const var"÷"       =  _T.DIVISION_SIGN
const var"%"       =  _T.REM
const var"⋅"       =  _T.UNICODE_DOT
const var"∘"       =  _T.RING_OPERATOR
const var"×"       =  _T.MULTIPLICATION_SIGN
const var"\\"      =  _T.BACKSLASH
const var"&"       =  _T.AND
const var"∩"       =  _T.INTERSECTION
const var"∧"       =  _T.LOGICAL_AND
const var"⊗"       =  _T.CIRCLED_TIMES
const var"⊘"       =  _T.CIRCLED_DIVISION_SLASH
const var"⊙"       =  _T.CIRCLED_DOT_OPERATOR
const var"⊚"       =  _T.CIRCLED_RING_OPERATOR
const var"⊛"       =  _T.CIRCLED_ASTERISK_OPERATOR
const var"⊠"       =  _T.SQUARED_TIMES
const var"⊡"       =  _T.SQUARED_DOT_OPERATOR
const var"⊓"       =  _T.SQUARE_CAP
const var"∗"       =  _T.ASTERISK_OPERATOR
const var"∙"       =  _T.BULLET_OPERATOR
const var"∤"       =  _T.DOES_NOT_DIVIDE
const var"⅋"       =  _T.TURNED_AMPERSAND
const var"≀"       =  _T.WREATH_PRODUCT
const var"⊼"       =  _T.NAND
const var"⋄"       =  _T.DIAMOND_OPERATOR
const var"⋆"       =  _T.STAR_OPERATOR
const var"⋇"       =  _T.DIVISION_TIMES
const var"⋉"       =  _T.LEFT_NORMAL_FACTOR_SEMIDIRECT_PRODUCT
const var"⋊"       =  _T.RIGHT_NORMAL_FACTOR_SEMIDIRECT_PRODUCT
const var"⋋"       =  _T.LEFT_SEMIDIRECT_PRODUCT
const var"⋌"       =  _T.RIGHT_SEMIDIRECT_PRODUCT
const var"⋏"       =  _T.CURLY_LOGICAL_AND
const var"⋒"       =  _T.DOUBLE_INTERSECTION
const var"⟑"       =  _T.AND_WITH_DOT
const var"⦸"       =  _T.CIRCLED_REVERSE_SOLIDUS
const var"⦼"       =  _T.CIRCLED_ANTICLOCKWISE_ROTATED_DIVISION_SIGN
const var"⦾"       =  _T.CIRCLED_WHITE_BULLET
const var"⦿"       =  _T.CIRCLED_BULLET
const var"⧶"       =  _T.SOLIDUS_WITH_OVERBAR
const var"⧷"       =  _T.REVERSE_SOLIDUS_WITH_HORIZONTAL_STROKE
const var"⨇"       =  _T.TWO_LOGICAL_AND_OPERATOR
const var"⨰"       =  _T.MULTIPLICATION_SIGN_WITH_DOT_ABOVE
const var"⨱"       =  _T.MULTIPLICATION_SIGN_WITH_UNDERBAR
const var"⨲"       =  _T.SEMIDIRECT_PRODUCT_WITH_BOTTOM_CLOSED
const var"⨳"       =  _T.SMASH_PRODUCT
const var"⨴"       =  _T.MULTIPLICATION_SIGN_IN_LEFT_HALF_CIRCLE
const var"⨵"       =  _T.MULTIPLICATION_SIGN_IN_RIGHT_HALF_CIRCLE
const var"⨶"       =  _T.CIRCLED_MULTIPLICATION_SIGN_WITH_CIRCUMFLEX_ACCENT
const var"⨷"       =  _T.MULTIPLICATION_SIGN_IN_DOUBLE_CIRCLE
const var"⨸"       =  _T.CIRCLED_DIVISION_SIGN
const var"⨻"       =  _T.MULTIPLICATION_SIGN_IN_TRIANGLE
const var"⨼"       =  _T.INTERIOR_PRODUCT
const var"⨽"       =  _T.RIGHTHAND_INTERIOR_PRODUCT
const var"⩀"       =  _T.INTERSECTION_WITH_DOT
const var"⩃"       =  _T.INTERSECTION_WITH_OVERBAR
const var"⩄"       =  _T.INTERSECTION_WITH_LOGICAL_AND
const var"⩋"       =  _T.INTERSECTION_BESIDE_AND_JOINED_WITH_INTERSECTION
const var"⩍"       =  _T.CLOSED_INTERSECTION_WITH_SERIFS
const var"⩎"       =  _T.DOUBLE_SQUARE_INTERSECTION
const var"⩑"       =  _T.LOGICAL_AND_WITH_DOT_ABOVE
const var"⩓"       =  _T.DOUBLE_LOGICAL_AND
const var"⩕"       =  _T.TWO_INTERSECTING_LOGICAL_AND
const var"⩘"       =  _T.SLOPING_LARGE_AND
const var"⩚"       =  _T.LOGICAL_AND_WITH_MIDDLE_STEM
const var"⩜"       =  _T.LOGICAL_AND_WITH_HORIZONTAL_DASH
const var"⩞"       =  _T.LOGICAL_AND_WITH_DOUBLE_OVERBAR
const var"⩟"       =  _T.LOGICAL_AND_WITH_UNDERBAR
const var"⩠"       =  _T.LOGICAL_AND_WITH_DOUBLE_UNDERBAR
const var"⫛"       =  _T.TRANSVERSAL_INTERSECTION
const var"⊍"       =  _T.MULTISET_MULTIPLICATION
const var"▷"       =  _T.WHITE_RIGHT_POINTING_TRIANGLE
const var"⨝"       =  _T.JOIN
const var"⟕"       =  _T.LEFT_OUTER_JOIN
const var"⟖"       =  _T.RIGHT_OUTER_JOIN
const var"⟗"       =  _T.FULL_OUTER_JOIN
const var"⌿"       =  _T.NOT_SLASH
const var"⨟"       =  _T.BB_SEMI
const END_TIMES    =  _T.end_times

# Level 12
const BEGIN_RATIONAL  =  _T.begin_rational
const var"//"         =  _T.FWDFWD_SLASH
const END_RATIONAL    =  _T.end_rational

# Level 13
const BEGIN_POWER  =  _T.begin_power
const var"^"       =  _T.CIRCUMFLEX_ACCENT
const var"↑"       =  _T.UPWARDS_ARROW
const var"↓"       =  _T.DOWNWARDS_ARROW
const var"⇵"       =  _T.DOWNWARDS_ARROW_LEFTWARDS_OF_UPWARDS_ARROW
const var"⟰"       =  _T.UPWARDS_QUADRUPLE_ARROW
const var"⟱"       =  _T.DOWNWARDS_QUADRUPLE_ARROW
const var"⤈"       =  _T.DOWNWARDS_ARROW_WITH_HORIZONTAL_STROKE
const var"⤉"       =  _T.UPWARDS_ARROW_WITH_HORIZONTAL_STROKE
const var"⤊"       =  _T.UPWARDS_TRIPLE_ARROW
const var"⤋"       =  _T.DOWNWARDS_TRIPLE_ARROW
const var"⤒"       =  _T.UPWARDS_ARROW_TO_BAR
const var"⤓"       =  _T.DOWNWARDS_ARROW_TO_BAR
const var"⥉"       =  _T.UPWARDS_TWO_HEADED_ARROW_FROM_SMALL_CIRCLE
const var"⥌"       =  _T.UP_BARB_RIGHT_DOWN_BARB_LEFT_HARPOON
const var"⥍"       =  _T.UP_BARB_LEFT_DOWN_BARB_RIGHT_HARPOON
const var"⥏"       =  _T.UP_BARB_RIGHT_DOWN_BARB_RIGHT_HARPOON
const var"⥑"       =  _T.UP_BARB_LEFT_DOWN_BARB_LEFT_HARPOON
const var"⥔"       =  _T.UPWARDS_HARPOON_WITH_BARB_RIGHT_TO_BAR
const var"⥕"       =  _T.DOWNWARDS_HARPOON_WITH_BARB_RIGHT_TO_BAR
const var"⥘"       =  _T.UPWARDS_HARPOON_WITH_BARB_LEFT_TO_BAR
const var"⥙"       =  _T.DOWNWARDS_HARPOON_WITH_BARB_LEFT_TO_BAR
const var"⥜"       =  _T.UPWARDS_HARPOON_WITH_BARB_RIGHT_FROM_BAR
const var"⥝"       =  _T.DOWNWARDS_HARPOON_WITH_BARB_RIGHT_FROM_BAR
const var"⥠"       =  _T.UPWARDS_HARPOON_WITH_BARB_LEFT_FROM_BAR
const var"⥡"       =  _T.DOWNWARDS_HARPOON_WITH_BARB_LEFT_FROM_BAR
const var"⥣"       =  _T.UPWARDS_HARPOON_WITH_BARB_LEFT_BESIDE_UPWARDS_HARPOON_WITH_BARB_RIGHT
const var"⥥"       =  _T.DOWNWARDS_HARPOON_WITH_BARB_LEFT_BESIDE_DOWNWARDS_HARPOON_WITH_BARB_RIGHT
const var"⥮"       =  _T.UPWARDS_HARPOON_WITH_BARB_LEFT_BESIDE_DOWNWARDS_HARPOON_WITH_BARB_RIGHT
const var"⥯"       =  _T.DOWNWARDS_HARPOON_WITH_BARB_LEFT_BESIDE_UPWARDS_HARPOON_WITH_BARB_RIGHT
const var"￪"       =  _T.HALFWIDTH_UPWARDS_ARROW
const var"￬"       =  _T.HALFWIDTH_DOWNWARDS_ARROW
const END_POWER    =  _T.end_power

# Level 14
const BEGIN_DECL  =  _T.begin_decl
const var"::"     =  _T.DECLARATION
const END_DECL    =  _T.end_decl

# Level 15
const BEGIN_WHERE  =  _T.begin_where
const var"where"   =  _T.WHERE
const END_WHERE    =  _T.end_where

# Level 16
const BEGIN_DOT  =  _T.begin_dot
const var"."     =  _T.DOT
const END_DOT    =  _T.end_dot

const var"!"   =  _T.NOT
const var"'"   =  _T.PRIME
const var".'"  =  _T.TRANSPOSE
const var"->"  =  _T.ANON_FUNC

const BEGIN_UNICODE_OPS  =  _T.begin_unicode_ops
const var"¬"             =  _T.NOT_SIGN
const var"√"             =  _T.SQUARE_ROOT
const var"∛"             =  _T.CUBE_ROOT
const var"∜"             =  _T.QUAD_ROOT
const END_UNICODE_OPS    =  _T.end_unicode_ops

const END_OPS = _T.end_ops

end

