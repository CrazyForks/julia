
const UNICODE_OPS = Dict{Char, Kind}(
    # '−' is normalized into K"-",
    '−' => K"-",
    '÷' => K"÷",
    '¬' => K"¬",
    '√' => K"√",
    '∛' => K"∛",
    '∜' => K"∜",
    '←' => K"←",
    '→' => K"→",
    '↔' => K"↔",
    '↚' => K"↚",
    '↛' => K"↛",
    '↞' => K"↞",
    '↠' => K"↠",
    '↢' => K"↢",
    '↣' => K"↣",
    '↤' => K"↤",
    '↦' => K"↦",
    '↮' => K"↮",
    '⇎' => K"⇎",
    '⇍' => K"⇍",
    '⇏' => K"⇏",
    '⇐' => K"⇐",
    '⇒' => K"⇒",
    '⇔' => K"⇔",
    '⇴' => K"⇴",
    '⇶' => K"⇶",
    '⇷' => K"⇷",
    '⇸' => K"⇸",
    '⇹' => K"⇹",
    '⇺' => K"⇺",
    '⇻' => K"⇻",
    '⇼' => K"⇼",
    '⇽' => K"⇽",
    '⇾' => K"⇾",
    '⇿' => K"⇿",
    '⟵' => K"⟵",
    '⟶' => K"⟶",
    '⟷' => K"⟷",
    '⟹' => K"⟹",
    '⟺' => K"⟺",
    '⟻' => K"⟻",
    '⟼' => K"⟼",
    '⟽' => K"⟽",
    '⟾' => K"⟾",
    '⟿' => K"⟿",
    '⤀' => K"⤀",
    '⤁' => K"⤁",
    '⤂' => K"⤂",
    '⤃' => K"⤃",
    '⤄' => K"⤄",
    '⤅' => K"⤅",
    '⤆' => K"⤆",
    '⤇' => K"⤇",
    '⤌' => K"⤌",
    '⤍' => K"⤍",
    '⤎' => K"⤎",
    '⤏' => K"⤏",
    '⤐' => K"⤐",
    '⤑' => K"⤑",
    '⤔' => K"⤔",
    '⤕' => K"⤕",
    '⤖' => K"⤖",
    '⤗' => K"⤗",
    '⤘' => K"⤘",
    '⤝' => K"⤝",
    '⤞' => K"⤞",
    '⤟' => K"⤟",
    '⤠' => K"⤠",
    '⥄' => K"⥄",
    '⥅' => K"⥅",
    '⥆' => K"⥆",
    '⥇' => K"⥇",
    '⥈' => K"⥈",
    '⥊' => K"⥊",
    '⥋' => K"⥋",
    '⥎' => K"⥎",
    '⥐' => K"⥐",
    '⥒' => K"⥒",
    '⥓' => K"⥓",
    '⥖' => K"⥖",
    '⥗' => K"⥗",
    '⥚' => K"⥚",
    '⥛' => K"⥛",
    '⥞' => K"⥞",
    '⥟' => K"⥟",
    '⥢' => K"⥢",
    '⥤' => K"⥤",
    '⥦' => K"⥦",
    '⥧' => K"⥧",
    '⥨' => K"⥨",
    '⥩' => K"⥩",
    '⥪' => K"⥪",
    '⥫' => K"⥫",
    '⥬' => K"⥬",
    '⥭' => K"⥭",
    '⥰' => K"⥰",
    '⧴' => K"⧴",
    '⬱' => K"⬱",
    '⬰' => K"⬰",
    '⬲' => K"⬲",
    '⬳' => K"⬳",
    '⬴' => K"⬴",
    '⬵' => K"⬵",
    '⬶' => K"⬶",
    '⬷' => K"⬷",
    '⬸' => K"⬸",
    '⬹' => K"⬹",
    '⬺' => K"⬺",
    '⬻' => K"⬻",
    '⬼' => K"⬼",
    '⬽' => K"⬽",
    '⬾' => K"⬾",
    '⬿' => K"⬿",
    '⭀' => K"⭀",
    '⭁' => K"⭁",
    '⭂' => K"⭂",
    '⭃' => K"⭃",
    '⭄' => K"⭄",
    '⭇' => K"⭇",
    '⭈' => K"⭈",
    '⭉' => K"⭉",
    '⭊' => K"⭊",
    '⭋' => K"⭋",
    '⭌' => K"⭌",
    '￩' => K"￩",
    '￫' => K"￫",
    '≥' => K"≥",
    '≤' => K"≤",
    '≡' => K"≡",
    '≠' => K"≠",
    '≢' => K"≢",
    '∈' => K"∈",
    '∉' => K"∉",
    '∋' => K"∋",
    '∌' => K"∌",
    '⊆' => K"⊆",
    '⊈' => K"⊈",
    '⊂' => K"⊂",
    '⊄' => K"⊄",
    '⊊' => K"⊊",
    '∝' => K"∝",
    '∊' => K"∊",
    '∍' => K"∍",
    '∥' => K"∥",
    '∦' => K"∦",
    '∷' => K"∷",
    '∺' => K"∺",
    '∻' => K"∻",
    '∽' => K"∽",
    '∾' => K"∾",
    '≁' => K"≁",
    '≃' => K"≃",
    '≄' => K"≄",
    '≅' => K"≅",
    '≆' => K"≆",
    '≇' => K"≇",
    '≈' => K"≈",
    '≉' => K"≉",
    '≊' => K"≊",
    '≋' => K"≋",
    '≌' => K"≌",
    '≍' => K"≍",
    '≎' => K"≎",
    '≐' => K"≐",
    '≑' => K"≑",
    '≒' => K"≒",
    '≓' => K"≓",
    '≔' => K"≔",
    '≕' => K"≕",
    '≖' => K"≖",
    '≗' => K"≗",
    '≘' => K"≘",
    '≙' => K"≙",
    '≚' => K"≚",
    '≛' => K"≛",
    '≜' => K"≜",
    '≝' => K"≝",
    '≞' => K"≞",
    '≟' => K"≟",
    '≣' => K"≣",
    '≦' => K"≦",
    '≧' => K"≧",
    '≨' => K"≨",
    '≩' => K"≩",
    '≪' => K"≪",
    '≫' => K"≫",
    '≬' => K"≬",
    '≭' => K"≭",
    '≮' => K"≮",
    '≯' => K"≯",
    '≰' => K"≰",
    '≱' => K"≱",
    '≲' => K"≲",
    '≳' => K"≳",
    '≴' => K"≴",
    '≵' => K"≵",
    '≶' => K"≶",
    '≷' => K"≷",
    '≸' => K"≸",
    '≹' => K"≹",
    '≺' => K"≺",
    '≻' => K"≻",
    '≼' => K"≼",
    '≽' => K"≽",
    '≾' => K"≾",
    '≿' => K"≿",
    '⊀' => K"⊀",
    '⊁' => K"⊁",
    '⊃' => K"⊃",
    '⊅' => K"⊅",
    '⊇' => K"⊇",
    '⊉' => K"⊉",
    '⊋' => K"⊋",
    '⊏' => K"⊏",
    '⊐' => K"⊐",
    '⊑' => K"⊑",
    '⊒' => K"⊒",
    '⊜' => K"⊜",
    '⊩' => K"⊩",
    '⊬' => K"⊬",
    '⊮' => K"⊮",
    '⊰' => K"⊰",
    '⊱' => K"⊱",
    '⊲' => K"⊲",
    '⊳' => K"⊳",
    '⊴' => K"⊴",
    '⊵' => K"⊵",
    '⊶' => K"⊶",
    '⊷' => K"⊷",
    '⋍' => K"⋍",
    '⋐' => K"⋐",
    '⋑' => K"⋑",
    '⋕' => K"⋕",
    '⋖' => K"⋖",
    '⋗' => K"⋗",
    '⋘' => K"⋘",
    '⋙' => K"⋙",
    '⋚' => K"⋚",
    '⋛' => K"⋛",
    '⋜' => K"⋜",
    '⋝' => K"⋝",
    '⋞' => K"⋞",
    '⋟' => K"⋟",
    '⋠' => K"⋠",
    '⋡' => K"⋡",
    '⋢' => K"⋢",
    '⋣' => K"⋣",
    '⋤' => K"⋤",
    '⋥' => K"⋥",
    '⋦' => K"⋦",
    '⋧' => K"⋧",
    '⋨' => K"⋨",
    '⋩' => K"⋩",
    '⋪' => K"⋪",
    '⋫' => K"⋫",
    '⋬' => K"⋬",
    '⋭' => K"⋭",
    '⋲' => K"⋲",
    '⋳' => K"⋳",
    '⋴' => K"⋴",
    '⋵' => K"⋵",
    '⋶' => K"⋶",
    '⋷' => K"⋷",
    '⋸' => K"⋸",
    '⋹' => K"⋹",
    '⋺' => K"⋺",
    '⋻' => K"⋻",
    '⋼' => K"⋼",
    '⋽' => K"⋽",
    '⋾' => K"⋾",
    '⋿' => K"⋿",
    '⟈' => K"⟈",
    '⟉' => K"⟉",
    '⟒' => K"⟒",
    '⦷' => K"⦷",
    '⧀' => K"⧀",
    '⧁' => K"⧁",
    '⧡' => K"⧡",
    '⧣' => K"⧣",
    '⧤' => K"⧤",
    '⧥' => K"⧥",
    '⩦' => K"⩦",
    '⩧' => K"⩧",
    '⩪' => K"⩪",
    '⩫' => K"⩫",
    '⩬' => K"⩬",
    '⩭' => K"⩭",
    '⩮' => K"⩮",
    '⩯' => K"⩯",
    '⩰' => K"⩰",
    '⩱' => K"⩱",
    '⩲' => K"⩲",
    '⩳' => K"⩳",
    '⩴' => K"⩴",
    '⩵' => K"⩵",
    '⩶' => K"⩶",
    '⩷' => K"⩷",
    '⩸' => K"⩸",
    '⩹' => K"⩹",
    '⩺' => K"⩺",
    '⩻' => K"⩻",
    '⩼' => K"⩼",
    '⩽' => K"⩽",
    '⩾' => K"⩾",
    '⩿' => K"⩿",
    '⪀' => K"⪀",
    '⪁' => K"⪁",
    '⪂' => K"⪂",
    '⪃' => K"⪃",
    '⪄' => K"⪄",
    '⪅' => K"⪅",
    '⪆' => K"⪆",
    '⪇' => K"⪇",
    '⪈' => K"⪈",
    '⪉' => K"⪉",
    '⪊' => K"⪊",
    '⪋' => K"⪋",
    '⪌' => K"⪌",
    '⪍' => K"⪍",
    '⪎' => K"⪎",
    '⪏' => K"⪏",
    '⪐' => K"⪐",
    '⪑' => K"⪑",
    '⪒' => K"⪒",
    '⪓' => K"⪓",
    '⪔' => K"⪔",
    '⪕' => K"⪕",
    '⪖' => K"⪖",
    '⪗' => K"⪗",
    '⪘' => K"⪘",
    '⪙' => K"⪙",
    '⪚' => K"⪚",
    '⪛' => K"⪛",
    '⪜' => K"⪜",
    '⪝' => K"⪝",
    '⪞' => K"⪞",
    '⪟' => K"⪟",
    '⪠' => K"⪠",
    '⪡' => K"⪡",
    '⪢' => K"⪢",
    '⪣' => K"⪣",
    '⪤' => K"⪤",
    '⪥' => K"⪥",
    '⪦' => K"⪦",
    '⪧' => K"⪧",
    '⪨' => K"⪨",
    '⪩' => K"⪩",
    '⪪' => K"⪪",
    '⪫' => K"⪫",
    '⪬' => K"⪬",
    '⪭' => K"⪭",
    '⪮' => K"⪮",
    '⪯' => K"⪯",
    '⪰' => K"⪰",
    '⪱' => K"⪱",
    '⪲' => K"⪲",
    '⪳' => K"⪳",
    '⪴' => K"⪴",
    '⪵' => K"⪵",
    '⪶' => K"⪶",
    '⪷' => K"⪷",
    '⪸' => K"⪸",
    '⪹' => K"⪹",
    '⪺' => K"⪺",
    '⪻' => K"⪻",
    '⪼' => K"⪼",
    '⪽' => K"⪽",
    '⪾' => K"⪾",
    '⪿' => K"⪿",
    '⫀' => K"⫀",
    '⫁' => K"⫁",
    '⫂' => K"⫂",
    '⫃' => K"⫃",
    '⫄' => K"⫄",
    '⫅' => K"⫅",
    '⫆' => K"⫆",
    '⫇' => K"⫇",
    '⫈' => K"⫈",
    '⫉' => K"⫉",
    '⫊' => K"⫊",
    '⫋' => K"⫋",
    '⫌' => K"⫌",
    '⫍' => K"⫍",
    '⫎' => K"⫎",
    '⫏' => K"⫏",
    '⫐' => K"⫐",
    '⫑' => K"⫑",
    '⫒' => K"⫒",
    '⫓' => K"⫓",
    '⫔' => K"⫔",
    '⫕' => K"⫕",
    '⫖' => K"⫖",
    '⫗' => K"⫗",
    '⫘' => K"⫘",
    '⫙' => K"⫙",
    '⫷' => K"⫷",
    '⫸' => K"⫸",
    '⫹' => K"⫹",
    '⫺' => K"⫺",
    '⊢' => K"⊢",
    '⊣' => K"⊣",
    '⫪' => K"⫪",
    '⫫' => K"⫫",
    '⟂' => K"⟂",
    '⊕' => K"⊕",
    '⊖' => K"⊖",
    '⊞' => K"⊞",
    '⊟' => K"⊟",
    '|' => K"|",
    '∪' => K"∪",
    '∨' => K"∨",
    '⊔' => K"⊔",
    '±' => K"±",
    '∓' => K"∓",
    '∔' => K"∔",
    '∸' => K"∸",
    '≂' => K"≂",
    '≏' => K"≏",
    '⊎' => K"⊎",
    '⊻' => K"⊻",
    '⊽' => K"⊽",
    '⋎' => K"⋎",
    '⋓' => K"⋓",
    '⧺' => K"⧺",
    '⧻' => K"⧻",
    '⨈' => K"⨈",
    '⨢' => K"⨢",
    '⨣' => K"⨣",
    '⨤' => K"⨤",
    '⨥' => K"⨥",
    '⨦' => K"⨦",
    '⨧' => K"⨧",
    '⨨' => K"⨨",
    '⨩' => K"⨩",
    '⨪' => K"⨪",
    '⨫' => K"⨫",
    '⨬' => K"⨬",
    '⨭' => K"⨭",
    '⨮' => K"⨮",
    '⨹' => K"⨹",
    '⨺' => K"⨺",
    '⩁' => K"⩁",
    '⩂' => K"⩂",
    '⩅' => K"⩅",
    '⩊' => K"⩊",
    '⩌' => K"⩌",
    '⩏' => K"⩏",
    '⩐' => K"⩐",
    '⩒' => K"⩒",
    '⩔' => K"⩔",
    '⩖' => K"⩖",
    '⩗' => K"⩗",
    '⩛' => K"⩛",
    '⩝' => K"⩝",
    '⩡' => K"⩡",
    '⩢' => K"⩢",
    '⩣' => K"⩣",
    '∘' => K"∘",
    '×' => K"×",
    '∩' => K"∩",
    '∧' => K"∧",
    '⊗' => K"⊗",
    '⊘' => K"⊘",
    '⊙' => K"⊙",
    '⊚' => K"⊚",
    '⊛' => K"⊛",
    '⊠' => K"⊠",
    '⊡' => K"⊡",
    '⊓' => K"⊓",
    '∗' => K"∗",
    '∙' => K"∙",
    '∤' => K"∤",
    '⅋' => K"⅋",
    '≀' => K"≀",
    '⊼' => K"⊼",
    '⋄' => K"⋄",
    '⋆' => K"⋆",
    '⋇' => K"⋇",
    '⋉' => K"⋉",
    '⋊' => K"⋊",
    '⋋' => K"⋋",
    '⋌' => K"⋌",
    '⋏' => K"⋏",
    '⋒' => K"⋒",
    '⟑' => K"⟑",
    '⦸' => K"⦸",
    '⦼' => K"⦼",
    '⦾' => K"⦾",
    '⦿' => K"⦿",
    '⧶' => K"⧶",
    '⧷' => K"⧷",
    '⨇' => K"⨇",
    '⨰' => K"⨰",
    '⨱' => K"⨱",
    '⨲' => K"⨲",
    '⨳' => K"⨳",
    '⨴' => K"⨴",
    '⨵' => K"⨵",
    '⨶' => K"⨶",
    '⨷' => K"⨷",
    '⨸' => K"⨸",
    '⨻' => K"⨻",
    '⨼' => K"⨼",
    '⨽' => K"⨽",
    '⩀' => K"⩀",
    '⩃' => K"⩃",
    '⩄' => K"⩄",
    '⩋' => K"⩋",
    '⩍' => K"⩍",
    '⩎' => K"⩎",
    '⩑' => K"⩑",
    '⩓' => K"⩓",
    '⩕' => K"⩕",
    '⩘' => K"⩘",
    '⩚' => K"⩚",
    '⩜' => K"⩜",
    '⩞' => K"⩞",
    '⩟' => K"⩟",
    '⩠' => K"⩠",
    '⫛' => K"⫛",
    '⊍' => K"⊍",
    '▷' => K"▷",
    '⨝' => K"⨝",
    '⟕' => K"⟕",
    '⟖' => K"⟖",
    '⟗' => K"⟗",
    '^' => K"^",
    '↑' => K"↑",
    '↓' => K"↓",
    '⇵' => K"⇵",
    '⟰' => K"⟰",
    '⟱' => K"⟱",
    '⤈' => K"⤈",
    '⤉' => K"⤉",
    '⤊' => K"⤊",
    '⤋' => K"⤋",
    '⤒' => K"⤒",
    '⤓' => K"⤓",
    '⥉' => K"⥉",
    '⥌' => K"⥌",
    '⥍' => K"⥍",
    '⥏' => K"⥏",
    '⥑' => K"⥑",
    '⥔' => K"⥔",
    '⥕' => K"⥕",
    '⥘' => K"⥘",
    '⥙' => K"⥙",
    '⥜' => K"⥜",
    '⥝' => K"⥝",
    '⥠' => K"⥠",
    '⥡' => K"⥡",
    '⥣' => K"⥣",
    '⥥' => K"⥥",
    '⥮' => K"⥮",
    '⥯' => K"⥯",
    '￪' => K"￪",
    '￬' => K"￬",
    # Lookalikes which are normalized into K"⋅",
    # https://github.com/JuliaLang/julia/pull/25157,
    '\u00b7' => K"⋅", # '·' Middle Dot,,
    '\u0387' => K"⋅", # '·' Greek Ano Teleia,,
    '⋅' => K"⋅",
    '…' => K"…",
    '⁝' => K"⁝",
    '⋮' => K"⋮",
    '⋱' => K"⋱",
    '⋰' => K"⋰",
    '⋯' => K"⋯",
    '↻' => K"↻",
    '⇜' => K"⇜",
    '⇝' => K"⇝",
    '↜' => K"↜",
    '↝' => K"↝",
    '↩' => K"↩",
    '↪' => K"↪",
    '↫' => K"↫",
    '↬' => K"↬",
    '↼' => K"↼",
    '↽' => K"↽",
    '⇀' => K"⇀",
    '⇁' => K"⇁",
    '⇄' => K"⇄",
    '⇆' => K"⇆",
    '⇇' => K"⇇",
    '⇉' => K"⇉",
    '⇋' => K"⇋",
    '⇌' => K"⇌",
    '⇚' => K"⇚",
    '⇛' => K"⇛",
    '⇠' => K"⇠",
    '⇢' => K"⇢",
    '↷' => K"↷",
    '↶' => K"↶",
    '↺' => K"↺",
    '¦' => K"¦",
    '⌿' => K"⌿",
    '⨟' => K"⨟",
)

const UNICODE_OPS_REVERSE = Dict{Kind,Symbol}()
for (k, v) in UNICODE_OPS
    k in ('\u00b7', '\u0387') && continue
    UNICODE_OPS_REVERSE[v] = Symbol(k)
end

for (k, v) in [
        K"="      =>  :(=)
        K"+="     =>  :(+=)
        K"-="     =>  :(-=)
        K"*="     =>  :(*=)
        K"/="     =>  :(/=)
        K"//="    =>  :(//=)
        K"|="     =>  :(|=)
        K"^="     =>  :(^=)
        K"÷="     =>  :(÷=)
        K"%="     =>  :(%=)
        K"<<="    =>  :(<<=)
        K">>="    =>  :(>>=)
        K"<<"     =>  :(<<)
        K">>"     =>  :(>>)
        K">>>"    =>  :(>>>)
        K">>>="   =>  :(>>>=)
        K"\="     =>  :(\=)
        K"&="     =>  :(&=)
        K":="     =>  :(:=)
        K"=>"     =>  :(=>)
        K"~"      =>  :(~)
        K"$="     =>  :($=)
        K"⊻="     =>  :(⊻=)
        K"-->"    =>  :(-->)
        K"||"     =>  :(||)
        K"&&"     =>  :(&&)
        K"<:"     =>  :(<:)
        K">:"     =>  :(>:)
        K">"      =>  :(>)
        K"<"      =>  :(<)
        K">="     =>  :(>=)
        K"≥"      =>  :(≥)
        K"<="     =>  :(<=)
        K"≤"      =>  :(≤)
        K"=="     =>  :(==)
        K"==="    =>  :(===)
        K"≡"      =>  :(≡)
        K"!="     =>  :(!=)
        K"≠"      =>  :(≠)
        K"!=="    =>  :(!==)
        K"≢"      =>  :(≢)
        K"in"     =>  :(in)
        K"isa"    =>  :(isa)
        K"<|"     =>  :(<|)
        K"|>"     =>  :(|>)
        K":"      =>  :(:)
        K".."     =>  :(..)
        K"$"      =>  :($)
        K"+"      =>  :(+)
        K"-"      =>  :(-)
        K"++"     =>  :(++)
        K"|"      =>  :(|)
        K"*"      =>  :(*)
        K"/"      =>  :(/)
        K"%"      =>  :(%)
        K"\\"     =>  :(\)
        K"&"      =>  :(&)
        K"//"     =>  :(//)
        K"^"      =>  :(^)
        K"::"     =>  :(::)
        K"?"      =>  :?
        K"."      =>  :(.)
        K"!"      =>  :(!)
        K"'"      =>  Symbol(''')
        K"..."    =>  :(...)
        K".'"     =>  Symbol(".'")
        K"->"     =>  :(->)
        K"where"  =>  :where
    ]
    UNICODE_OPS_REVERSE[k] = v
end
